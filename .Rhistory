arrange(desc(max_loan_amount))
# Write the code to produce your answer here
`wv_summary` %>%
group_by(`wv_summary`) %>%
summarise(
count_loans = n(),
total_loans_amount = sum(amount),
mean_loan_amount = mean(amount),
median_loan_amount = median(amount),
min_loan_amount = min(amount),
max_loan_amount = max(amount)
) %>%
arrange(desc(max_loan_amount))
# Write the code to produce your answer here
wv_ppp_loans %>%
summarise(
count_loans = n(),
total_loans_amount = sum(amount),
mean_loan_amount = mean(amount),
median_loan_amount = median(amount),
min_loan_amount = min(amount),
max_loan_amount = max(amount)
) %>%
arrange(desc(max_loan_amount))
# Write the code to produce your answer here
`wv summary` <-
wv_ppp_loans %>%
summarise(
count_loans = n(),
total_loans_amount = sum(amount),
mean_loan_amount = mean(amount),
median_loan_amount = median(amount),
min_loan_amount = min(amount),
max_loan_amount = max(amount)
) %>%
arrange(desc(max_loan_amount))
# Write the code to produce your answer here
`wv_summary` <-
wv_ppp_loans %>%
summarise(
count_loans = n(),
total_loans_amount = sum(amount),
mean_loan_amount = mean(amount),
median_loan_amount = median(amount),
min_loan_amount = min(amount),
max_loan_amount = max(amount)
) %>%
arrange(desc(max_loan_amount))
`wv_summary`
View(wv_summary)
# Write the code to produce your answer here
wv_ppp_loans %>%
arrange-(desc(amount))
# Write the code to produce your answer here
wv_ppp_loans %>%
arrange(-desc(amount))
# Write the code to produce your answer here
wv_ppp_loans %>%
arrange(desc(amount))
# Write the code to produce your answer here
wv_ppp_loans %>%
group_by(project_county_name) %>%
summarise(
count_loans = n()
) %>%
arrange(-desc(count_loans))
knitr::opts_chunk$set(echo = TRUE)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
popestimate_2010 <- read_csv("data/popestimate_2010.csv")
View(popestimate_2010)
popestimate_2015 <- read_csv("data/popestimate_2015.csv")
popestimate_2015 <- read_csv("data/popestimate_2015.csv")
View(popestimate_2010)
View(popestimate_2015)
popestimate_2020 <- read_csv("data/popestimate_2020.csv")
View(popestimate_2020)
# bind_rows with list
estimates <- bind_rows(list(popestimate_2010, popestimate_2015, popestimate_2020))
View(estimates)
maryland_ppp <- read_csv("data/ppp_applications_md.csv")
View(maryland_ppp)
naics_codes <- read_csv('data/naics_codes.csv')
# with nrow included to match row total
maryland_ppp %>% left_join(naics_codes, by="naics_code") %>% select(name, naics_code, title) %>% nrow()
View(naics_codes)
View(maryland_ppp)
# with nrow included to match row total
maryland_ppp %>% left_join(naics_codes, by="naics_code") %>% select(name, naics_code, title) %>% nrow()
# without nrow
maryland_ppp %>% left_join(naics_codes) %>% select(name, naics_code, title)
maryland_ppp_with_naics <- maryland_ppp %>% left_join(naics_codes)
maryland_ppp_with_naics <- maryland_ppp %>% left_join(naics_codes)
View(maryland_ppp)
View(maryland_ppp_with_naics)
maryland_zcta <- read_csv('data/maryland_zcta.csv')
# join on zip - but there's a problem
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip"="ZCTA5N"))
maryland_zcta <- maryland_zcta %>% mutate(across(ZCTA5N, as.character))
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip"="ZCTA5N"))
View(maryland_ppp_with_naics_and_demographics)
maryland_zcta <- maryland_zcta %>% mutate(across(ZCTA5N, as.character))
View(maryland_zcta)
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip"="ZCTA5N"))
View(maryland_ppp_with_naics_and_demographics)
View(maryland_zcta)
# make a zip5 column and redo the join
maryland_ppp_with_naics <- maryland_ppp_with_naics %>% mutate(zip5 = str_sub(zip, 1, 5))
maryland_ppp_with_naics_and_demographics <- maryland_ppp_with_naics %>% left_join(maryland_zcta, by=c("zip5"="ZCTA5N"))
View(maryland_ppp_with_naics_and_demographics)
# zcta with > 50% non-Hispanic Black population
maryland_ppp_with_naics_and_demographics %>%
filter(PNHB > 50) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# zcta with > 50% non-Hispanic white population
maryland_ppp_with_naics_and_demographics %>%
filter(PNHW > 50) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# zcta with > 50% non-Hispanic Black population grouped by rural/urban
maryland_ppp_with_naics_and_demographics %>%
filter(PNHB > 50) %>%
group_by(rural_urban_indicator) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# zcta with > 50% non-Hispanic white population grouped by rural/urban
maryland_ppp_with_naics_and_demographics %>%
filter(PNHW > 50) %>%
group_by(rural_urban_indicator) %>%
summarize(
count = n(),
avgamount = mean(amount),
medamount = median(amount))
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
```
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
```
setwd("~/Documents/GitHub/group-04_772_repo")
`2006-2017`<- read_csv("Data/payouts/FY06-FY18_PAYOUTS.csv")
read_csv("Data/payouts/FY06-FY18_PAYOUTS.csv")
setwd("~/Documents/GitHub/group-04_772_repo")
read_csv("FY06-FY18_PAYOUTS.csv")
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
```
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
read_csv("FY06-FY18_PAYOUTS.csv")
read_csv("Data/payouts/FY06-F18_TOTALS.csv")
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Turn off scientific notation
options(scipen=999)
library(tidyverse)
setwd("~/Documents/GitHub/group-04_772_repo")
read_csv("FY06-FY18_PAYOUTS.csv")
setwd("~/Documents/GitHub/group-04_772_repo")
read_csv("FY06-FY18_PAYOUTS.csv")
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
```
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
setwd("~/Documents/GitHub/reverse_engineering_repo")
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/FY06-FY18_PAYOUTS.csv')
View(all_payouts_decade)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
install.packages("readxl")
library(readxl)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv')
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
install.packages("readxl")
library(readxl)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv')
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv')
View(all_payouts_decade)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "claim_case_number", "amount", "department", "case_type"))
View(all_payouts_decade)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "case_type"))
View(all_payouts_decade)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "case_type"))
total_yearly_payouts <- read_csv('data/total_yearly_payouts.csv')
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "case_type"))
total_yearly_payouts <- read_csv('data/total_yearly_payouts.csv')
View(total_yearly_payouts)
2017_payouts <- all_payouts_decade %>%
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == "2017")
# Write the code to create a dataframe of only the payouts from the year 2017
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == "2017")
View(payouts_2017)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year == "2006" & "2007" & "2008" & "2009" & "2010" & "2011" & "2012" & "2013" & "2014" & "2015" & "2016")
View(all_payouts_decade)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < "2017")
View(all_payouts_decade)
View(payouts_2006_2016)
# Sum the total number of payouts from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
summarise(
count=n())
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
percent_change <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n(), number_all_payouts = sum(count)) %>%
arrange(fiscal_year)
View(yearly_payout_count)
yearly_payout_count %>%
sum(count())
yearly_payout_count %>%
total = sum(count())
yearly_payout_count %>%
total = sum(count)
yearly_payout_count %>%
total_payouts_10_years = sum(count)
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(payouts=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
total_payouts_10_years = sum(payouts)
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(payouts=n()) %>%
arrange(fiscal_year) %>%
yearly_payout_count %>%
total_payouts_10_years = sum(payouts)
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year) %>%
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
mutate(
total_payouts_10_years = sum(payouts)
)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(payouts)
)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(count)
)
yearly_payout_count %>%
mutate(
percent_change = ((( '2017-2006')/'18703')*100))
yearly_payout_count %>%
mutate(
percent_change = ((( '2017-2006')/18703)*100))
yearly_payout_count %>%
percent_change = ((( '2017-2006')/18703)*100)
yearly_payout_count %>%
percent_change = ((( "2017"-"2006")/18703)*100)
yearly_payout_count %>%
percent_change = (((1369-1468)/18703)*100)
yearly_payout_count %>%
percent_change = ((1369-1468)/18703)*100
yearly_payout_count %>%
mutate(
percent_change = ((1369-1468)/18703)*100
)
yearly_payout_count %>%
summarise(
percent_change = ((1369-1468)/18703)*100
)
View(payouts_2006_2016)
payouts_2006_2016 %>%
summarise(
mean_payout_amount = mean(amount)
)
View(payouts_2006_2016)
payouts_2006_2016 %>%
mutate(
amount = as.numeric(amount)
)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < "2017") %>%
mutate(
amount = as.numeric(amount)
)
cleaned_all_payouts_decade %>%
mutate(
amount = as.numeric(amount)
)
all_payouts_decade <- read_csv('data/clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "case_type"))
View(all_payouts_decade)
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
View(total_yearly_payouts)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "case_type"))
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
# Write the code to create a dataframe of only the payouts from the year 2017
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == "2017")
View(payouts_2017)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < "2017") %>%
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < "2017")
View(payouts_2006_2016)
# Sum the total number of payouts from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
summarise(
count=n())
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(count)
)
yearly_payout_count %>%
summarise(
percent_change = ((1369-1468)/18703)*100
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
mutate(
amount = as.numeric(amount)
)
summarise(
mean_payout_amount = mean(amount)
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
mean_payout_amount = mean(amount)
)
# Filter to find the total number of payouts over $1 million in 2017. (satisfies "Last budget year, the city paid out 30 settlements of $1 million or more")
payouts_2017 %>%
filter(amount > 1000000)
# Filter to find the total number of payouts over $1 million in 2017. (satisfies "Last budget year, the city paid out 30 settlements of $1 million or more")
payouts_2017 %>%
filter(amount >= 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(amount >= 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(amount > 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(amount >= 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(amount >= 1000000) %>%
select(fiscal_year, amount, case_name)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(fiscal_year == "2007" & amount >= 1000000) %>%
select(fiscal_year, amount, case_name)
# Write the code to load the CSV file here
all_payouts_decade <- read_csv('data/clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "case_type"))
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
mutate(
group_by(fiscal_year) %>%
mean_pay_amount = mean(amount)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
mutate(
group_by(fiscal_year) %>%
mean_pay_amount = mean(amount)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
group_by(fiscal_year) %>%
mutate()
mean_pay_amount = mean(amount)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
group_by(fiscal_year) %>%
mutate(
mean_pay_amount = mean(amount)
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
mean_pay_amount = mean(amount)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
mean_pay_amount = mean(amount)
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2006") %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2016") %>%
summarise(
mean_pay_amount_2016 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2006") %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2006") %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
yearly_payout_count %>%
summarise(
percent_change = ((94230.15-25345.32)/37567.26)*100)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2006") %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2016") %>%
summarise(
mean_pay_amount_2016 = mean(amount)
)
yearly_payout_count %>%
summarise(
percent_change = ((94230.15-25345.32)/37567.26)*100)
