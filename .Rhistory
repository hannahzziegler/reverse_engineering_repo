year = 2019)
md <- md %>% arrange(desc(estimate)) %>% top_n(20, estimate)
md
md %>%
mutate(NAME = gsub(" County, Maryland", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red") +
labs(title = "Household income by county in Maryland",
subtitle = "2015-2019 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)")
md19 <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "MD",
year = 2019)
md10 <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "MD",
year = 2010)
md10 %>%
inner_join(md19, by=c("GEOID", "NAME")) %>%
rename(estimate2010=estimate.x, estimate2019=estimate.y) %>%
mutate(min2010 = estimate2010-moe.x, max2010 = estimate2010+moe.x, min2019 = estimate2019-moe.y, max2019 = estimate2019+moe.y) %>%
select(-variable.x, -variable.y, -moe.x, -moe.y) %>%
mutate(change = ((estimate2019-estimate2010)/estimate2010)*100) %>%
arrange(change)
md %>%
mutate(NAME = gsub(" County, Maryland", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red") +
labs(title = "Household income by county in Maryland",
subtitle = "2015-2019 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)")
maryland_ppp <- read_rds("data/pre_lab_08.rds")
maryland_ppp <- maryland_ppp %>%
mutate(zip5 = str_sub(zip, 1, 5))
top_zips <- maryland_ppp %>%
group_by(zip5) %>%
summarise(total=sum(amount)) %>%
arrange(desc(total))
md_zipcodes <- get_acs(geography="zcta", variables = "B19013_001", state='MD')
md_zips_with_acs <- top_zips %>% left_join(md_zipcodes, by=c('zip5'='GEOID'))
View(md_zips_with_acs)
knitr::opts_chunk$set(echo = TRUE)
# Put code to reverse engineer sentence here
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == 2017)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Put code to reverse engineer sentence here
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == 2017)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
all_payouts_decade <- read_csv('data/finalized_clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "department_clean", "case_type"))
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
# Clean required data and prepare for analysis if needed.
# Put code to reverse engineer sentence here
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == 2017)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < 2017)
# Sum the total number of payouts from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
summarise(
count=n())
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(count)
)
yearly_payout_count %>%
summarise(
percent_change = ((1369-1468)/18703)*100
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2006") %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2016") %>%
summarise(
mean_pay_amount_2016 = mean(amount)
)
yearly_payout_count %>%
summarise(
percent_change = ((94230.15-25345.32)/37567.26)*100)
all_payouts_decade %>%
group_by(case_type) %>%
summarise(count = n())
all_payouts_decade %>%
group_by(case_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Put code to reverse engineer sentence here
police_department_payouts_2016 <- all_payouts_decade %>%
filter(department_clean == "Police Department" & fiscal_year == 2016 & amount > 7000000)
police_department_payouts_2016 %>%
filter(claim_case_number != "BC453870") %>%
summarize(total = sum(amount))
police_department_payouts_2016 %>%
group_by(case_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display results of code below this codeblock
police_department_payouts_2016 %>%
group_by(case_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
police_payouts <- all_payouts_decade %>%
filter(department_clean == "Police Department")
group_by(case_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(all_payouts_decade)
police_payouts <- all_payouts_decade %>%
group_by(case_type) %>%
filter(department_clean == "Police Department") %>%
summarise(count = n()) %>%
arrange(desc(count))
View(police_payouts)
setwd("~/Documents/GitHub/reverse_engineering_repo")
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
all_payouts_decade <- read_csv('data/finalized_clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "department_clean", "case_type"))
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
# Clean required data and prepare for analysis if needed.
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
all_payouts_decade <- read_csv('data/finalized_clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "department_clean", "case_type"))
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
# Clean required data and prepare for analysis if needed.
# Put code to reverse engineer sentence here
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == 2017)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < 2017)
# Sum the total number of payouts from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
summarise(
count=n())
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(count)
)
yearly_payout_count %>%
summarise(
percent_change = ((1369-1468)/18703)*100
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2006") %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == "2016") %>%
summarise(
mean_pay_amount_2016 = mean(amount)
)
yearly_payout_count %>%
summarise(
percent_change = ((94230.15-25345.32)/37567.26)*100)
# Put code to reverse engineer sentence here
# Filter to find the total number of payouts over $1 million in 2017. (satisfies "Last budget year, the city paid out 30 settlements of $1 million or more")
payouts_2017 %>%
filter(amount >= 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(fiscal_year == "2007" & amount >= 1000000) %>%
select(fiscal_year, amount, case_name)
# Put code to reverse engineer sentence here
police_department_payouts_2016 <- all_payouts_decade %>%
filter(department_clean == "Police Department" & fiscal_year == 2016 & amount > 7000000)
police_department_payouts_2016 %>%
filter(claim_case_number != "BC453870") %>%
summarize(total = sum(amount))
police_payouts <- all_payouts_decade %>%
group_by(case_type) %>%
filter(department_clean == "Police Department") %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display results of code below this codeblock
# "Thousands of legal battles" (using payouts as a proxy)
all_payouts_decade %>%
summarise(
count=n())
# Total amount of payouts over 10 years = 880687820
# Total Police Department Sum over 10 years
all_payouts_decade %>%
filter(department_clean == "Police Department") %>%
group_by(department_clean) %>%
summarize(total = sum(amount))
# Percentage of payouts that have been attributed to the police department across the last decade
(369018871)/880687820*100
all_payouts_decade %>%
filter(department_clean != "Police Department") %>%
group_by(department_clean) %>%
summarize(total = sum(amount)) %>%
mutate(percent = total/880687820*100) %>%
arrange(desc(total))
# Put code to reverse engineer sentence here
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == 2017)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < 2017)
# Sum the total number of payouts from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
summarise(
count=n())
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(count)
)
yearly_payout_count %>%
summarise(
percent_change = ((1369-1468)/18703)*100
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == 2006) %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == 2016) %>%
summarise(
mean_pay_amount_2016 = mean(amount)
)
yearly_payout_count %>%
summarise(
percent_change = ((94230.15-25345.32)/37567.26)*100)
# Put code to reverse engineer sentence here
# Filter to find the total number of payouts over $1 million in 2017. (satisfies "Last budget year, the city paid out 30 settlements of $1 million or more")
payouts_2017 %>%
filter(amount >= 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(fiscal_year == 2007 & amount >= 1000000) %>%
select(fiscal_year, amount, case_name)
police_payouts <- all_payouts_decade %>%
group_by(case_type) %>%
filter(department_clean == "Police Department") %>%
summarise(count = n()) %>%
arrange(desc(count))
View(police_payouts)
police_department_payouts_2016 <- all_payouts_decade %>%
filter(department_clean == "Police Department" & fiscal_year == 2016 & amount > 7000000)
police_department_payouts_2016 %>%
filter(claim_case_number != "BC453870") %>%
summarize(total = sum(amount))
police_payouts <- all_payouts_decade %>%
group_by(case_type) %>%
filter(department_clean == "Police Department") %>%
summarise(count = n()) %>%
arrange(desc(count))
all_payouts_decade %>%
filter(department_clean != "Police Department") %>%
group_by(department_clean) %>%
summarize(total = sum(amount)) %>%
mutate(percent = total/880687820*100) %>%
arrange(desc(total))
(369018871)/880687820*100
all_payouts_decade %>%
group_by(department_clean) %>%
summarize(total = sum(amount)) %>%
mutate(percent = total/880687820*100) %>%
arrange(desc(total))
View(all_payouts_decade)
all_payouts_decade %>%
filter(department_clean != "Police Department") %>%
group_by(department_clean) %>%
summarize(total = sum(amount)) %>%
mutate(percent = total/880687820*100) %>%
arrange(desc(total))
View(all_payouts_decade)
View(payouts_2017)
# "Thousands of legal battles" (using payouts as a proxy)
payouts_2017 %>%
summarize(total = sum(amount))
View(all_payouts_decade)
payouts_2018 <- all_payouts_decade %>%
filter(fiscal_year == 2018)
View(payouts_2017)
View(payouts_2006_2016)
View(payouts_2018)
payouts_2018 %>%
summarize(total = sum(amount))
payouts_2017 %>%
summarize(total = sum(amount))
View(all_payouts_decade)
View(md_zips_with_acs)
View(payouts_2018)
payouts_2018 <- all_payouts_decade %>%
filter(fiscal_year = 2018)
payouts_2018 <- all_payouts_decade %>%
filter(fiscal_year == 2018)
View(total_yearly_payouts)
all_payouts_decade %>%
filter(department_clean == "Department of Transportation")
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(name, 'Leopold'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold' | 'Larsen'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold' & 'Larsen'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold', 'Larsen'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Larsen'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Ailman'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Aleman'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Aleman'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Emely'))
all_payouts_decade %>%
filter(amount == 15000000))
all_payouts_decade %>%
filter(amount == 15000000)
View(top_zips)
all_payouts_decade %>%
filter(amount == 9500000)
all_payouts_decade %>%
filter(amount == 15000000)
View(sf3)
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Larsen'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Larsen'))
payouts_2017 %>%
summarize(total = sum(amount))
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse.
library(tidyverse)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
all_payouts_decade <- read_csv('data/finalized_clean_10_year_payouts.csv', skip=2, col_names =c("fiscal_year", "case_name", "claim_case_number", "amount", "department", "department_clean", "case_type"))
total_yearly_payouts <- read_csv('data/cleaned_total_yearly_payouts.csv')
# Clean required data and prepare for analysis if needed.
# Put code to reverse engineer sentence here
payouts_2017 <- all_payouts_decade %>%
filter(fiscal_year == 2017)
# Write the code to create a dataframe of payouts from 2006-2016
payouts_2006_2016 <- all_payouts_decade %>%
filter(fiscal_year < 2017)
# Sum the total number of payouts from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
summarise(
count=n())
# Determine the percent change in payouts through the whole 10-year period (satisfies "while the total number of payouts has dipped over time")
yearly_payout_count <- all_payouts_decade %>%
group_by(fiscal_year) %>%
summarise(count=n()) %>%
arrange(fiscal_year)
yearly_payout_count %>%
summarise(
total_payouts_10_years = sum(count)
)
yearly_payout_count %>%
summarise(
percent_change = ((1369-1468)/18703)*100
)
# Find the average amount of payouts from the decade 2006-2016 (satisfies "the average amount has increased")
payouts_2006_2016 %>%
summarise(
total_mean_pay_amount = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == 2006) %>%
summarise(
mean_pay_amount_2006 = mean(amount)
)
payouts_2006_2016 %>%
filter(fiscal_year == 2016) %>%
summarise(
mean_pay_amount_2016 = mean(amount)
)
yearly_payout_count %>%
summarise(
percent_change = ((94230.15-25345.32)/37567.26)*100)
# Put code to reverse engineer sentence here
# Filter to find the total number of payouts over $1 million in 2017. (satisfies "Last budget year, the city paid out 30 settlements of $1 million or more")
payouts_2017 %>%
filter(amount >= 1000000)
# Sum the total number of payouts greater the $1 million from 2006-2016 (satisfies "five times as many as a decade before")
payouts_2006_2016 %>%
filter(fiscal_year == 2007 & amount >= 1000000) %>%
select(fiscal_year, amount, case_name)
# Put code to reverse engineer sentence here
police_department_payouts_2016 <- all_payouts_decade %>%
filter(department_clean == "Police Department" & fiscal_year == 2016 & amount > 7000000)
police_department_payouts_2016 %>%
filter(claim_case_number != "BC453870") %>%
summarize(total = sum(amount))
police_payouts <- all_payouts_decade %>%
group_by(case_type) %>%
filter(department_clean == "Police Department") %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display results of code below this codeblock
# "Thousands of legal battles" (using payouts as a proxy)
all_payouts_decade %>%
summarise(
count=n())
# Total amount of payouts over 10 years = 880687820
# Total Police Department Sum over 10 years
all_payouts_decade %>%
filter(department_clean == "Police Department") %>%
group_by(department_clean) %>%
summarize(total = sum(amount))
# Percentage of payouts that have been attributed to the police department across the last decade
(369018871)/880687820*100
all_payouts_decade %>%
filter(department_clean != "Police Department") %>%
group_by(department_clean) %>%
summarize(total = sum(amount)) %>%
mutate(percent = total/880687820*100) %>%
arrange(desc(total))
all_payouts_decade %>%
filter(amount == 15000000)
all_payouts_decade %>%
filter(amount == 9500000)
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Leopold'))
all_payouts_decade %>%
filter(department_clean == "Department of Transportation") %>%
filter(str_detect(case_name, 'Larsen'))
payouts_2017 %>%
summarize(total = sum(amount))
police_payouts <- all_payouts_decade %>%
group_by(case_type) %>%
filter(department_clean == "Police Department") %>%
summarise(count = n()) %>%
arrange(desc(count))
